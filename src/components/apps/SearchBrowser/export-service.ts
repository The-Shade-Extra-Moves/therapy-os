import { SavedSearch, SearchResult, ExportFormat } from './types';
import jsPDF from 'jspdf';

export class SearchExporter {
  static async exportToPDF(search: SavedSearch): Promise<void> {
    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    let yPosition = 20;

    // Title
    doc.setFontSize(20);
    doc.text(`Search Results: ${search.query}`, 20, yPosition);
    yPosition += 15;

    // Metadata
    doc.setFontSize(12);
    doc.text(`Category: ${search.category}`, 20, yPosition);
    yPosition += 8;
    doc.text(`Date: ${search.timestamp.toLocaleDateString()}`, 20, yPosition);
    yPosition += 8;
    doc.text(`Results: ${search.results.length}`, 20, yPosition);
    yPosition += 15;

    // Notes if available
    if (search.notes) {
      doc.setFontSize(14);
      doc.text('Notes:', 20, yPosition);
      yPosition += 8;
      doc.setFontSize(10);
      const splitNotes = doc.splitTextToSize(search.notes, 170);
      doc.text(splitNotes, 20, yPosition);
      yPosition += splitNotes.length * 5 + 10;
    }

    // Results
    doc.setFontSize(14);
    doc.text('Search Results:', 20, yPosition);
    yPosition += 10;

    search.results.forEach((result, index) => {
      if (yPosition > pageHeight - 40) {
        doc.addPage();
        yPosition = 20;
      }

      doc.setFontSize(12);
      doc.setFont(undefined, 'bold');
      const titleLines = doc.splitTextToSize(`${index + 1}. ${result.title}`, 170);
      doc.text(titleLines, 20, yPosition);
      yPosition += titleLines.length * 6;

      doc.setFont(undefined, 'normal');
      doc.setFontSize(9);
      doc.setTextColor(0, 0, 255);
      doc.text(result.url, 20, yPosition);
      yPosition += 6;

      doc.setTextColor(0, 0, 0);
      doc.setFontSize(10);
      const contentLines = doc.splitTextToSize(result.content, 170);
      doc.text(contentLines, 20, yPosition);
      yPosition += contentLines.length * 4 + 8;
    });

    doc.save(`search-${search.query.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.pdf`);
  }

  static async exportToHTML(search: SavedSearch): Promise<void> {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Results: ${search.query}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
        .header { border-bottom: 2px solid #ccc; padding-bottom: 20px; margin-bottom: 30px; }
        .metadata { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 30px; }
        .result { margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .result-title { color: #1a0dab; font-size: 18px; font-weight: bold; margin-bottom: 5px; }
        .result-url { color: #006621; font-size: 14px; margin-bottom: 10px; }
        .result-content { color: #333; font-size: 14px; }
        .notes { background: #fff3cd; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Search Results: ${search.query}</h1>
    </div>
    
    <div class="metadata">
        <p><strong>Category:</strong> ${search.category}</p>
        <p><strong>Date:</strong> ${search.timestamp.toLocaleDateString()}</p>
        <p><strong>Total Results:</strong> ${search.results.length}</p>
        ${search.tags ? `<p><strong>Tags:</strong> ${search.tags.join(', ')}</p>` : ''}
    </div>
    
    ${search.notes ? `<div class="notes"><h3>Notes:</h3><p>${search.notes}</p></div>` : ''}
    
    <div class="results">
        ${search.results.map((result, index) => `
            <div class="result">
                <div class="result-title">${index + 1}. ${result.title}</div>
                <div class="result-url">${result.url}</div>
                <div class="result-content">${result.content}</div>
                ${result.engine ? `<p><small><strong>Source:</strong> ${result.engine}</small></p>` : ''}
            </div>
        `).join('')}
    </div>
    
    <footer style="margin-top: 50px; text-align: center; color: #666; font-size: 12px;">
        Generated by TherapyOS SearchBrowser on ${new Date().toLocaleString()}
    </footer>
</body>
</html>`;

    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `search-${search.query.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static async exportToJSON(search: SavedSearch): Promise<void> {
    const data = JSON.stringify(search, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `search-${search.query.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static async exportToCSV(search: SavedSearch): Promise<void> {
    const headers = ['Index', 'Title', 'URL', 'Content', 'Engine', 'Score'];
    const rows = search.results.map((result, index) => [
      index + 1,
      `"${result.title.replace(/"/g, '""')}"`,
      `"${result.url}"`,
      `"${result.content.replace(/"/g, '""')}"`,
      `"${result.engine}"`,
      result.score
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `search-${search.query.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static async exportToMarkdown(search: SavedSearch): Promise<void> {
    const markdown = `# Search Results: ${search.query}

## Metadata
- **Category:** ${search.category}
- **Date:** ${search.timestamp.toLocaleDateString()}
- **Total Results:** ${search.results.length}
${search.tags ? `- **Tags:** ${search.tags.join(', ')}` : ''}

${search.notes ? `## Notes\n${search.notes}\n` : ''}

## Results

${search.results.map((result, index) => `
### ${index + 1}. ${result.title}

**URL:** [${result.url}](${result.url})

${result.content}

*Source: ${result.engine}* | *Score: ${result.score}*

---
`).join('')}

*Generated by TherapyOS SearchBrowser on ${new Date().toLocaleString()}*`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `search-${search.query.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}

export const exportFormats: ExportFormat[] = [
  { format: 'pdf', name: 'PDF', icon: 'FileText' },
  { format: 'html', name: 'HTML', icon: 'Globe' },
  { format: 'json', name: 'JSON', icon: 'Code' },
  { format: 'csv', name: 'CSV', icon: 'Table' },
  { format: 'markdown', name: 'Markdown', icon: 'Hash' }
];
